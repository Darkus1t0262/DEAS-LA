name: CI/CD Pipeline

on:
  push:
    branches: [ test ]   # or 'main'

env:
  REGISTRY: docker.io
  NAMESPACE: darkjus
  PROJECT: deas-la

jobs:
  build_and_push:
    name: Build & Push to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}   # darkjus
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Services
        run: |
          declare -A services=(
            ["alert-generator-service"]="Alert Management/alert-generator-service"
            ["alert-router-service" ]="Alert Management/alert-router-service"
            ["delivery-service"     ]="Delivery-Logging/delivery-service"
            ["logger-service"       ]="Delivery-Logging/logger-service"
            ["auth-service"         ]="Delivery-Logging/auth-service"
          )

          for svc in "${!services[@]}"; do
            ctx="${services[$svc]}"
            img="${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.PROJECT }}-${svc}:latest"
            echo "Building $svc from $ctx → $img"
            docker build -t "$img" "$ctx"
            docker push "$img"
          done

  deploy:
    name: Deploy to EC2 Hosts
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy via Docker Compose on each EC2
        run: |
          HOSTS=(
            "${{ secrets.EC2_HOST_ALERT_GENERATOR }}"
            "${{ secrets.EC2_HOST_ALERT_ROUTER }}"
            "${{ secrets.EC2_HOST_DELIVERY }}"
            "${{ secrets.EC2_HOST_LOGGER }}"
            "${{ secrets.EC2_HOST_AUTH }}"
          )

          for host in "${HOSTS[@]}"; do
            echo "→ Deploying to $host"
            # Copy compose file
            scp -o StrictHostKeyChecking=no docker-compose.yml \
                ${{ secrets.EC2_USER }}@$host:~/docker-compose.yml

            # SSH & pull+start all containers without rebuilding
            ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$host << 'EOF'
              set -e
              cd ~
              docker compose -f docker-compose.yml pull
              docker compose -f docker-compose.yml up -d --no-build
            EOF
          done
